import Grove.Framework

/-
This file is autogenerated by grove. You can manually edit it, for example to resolve merge
conflicts, but be careful.
-/

open Grove.Framework Widget

namespace TestProject.Grove.Generated.«finite-integer-convert-then-convert»

def «986e32a2-1015-4fd0-bf1a-0983a85116ab:::a556b849-a735-48a9-8099-06496bddb069:::UInt8::UInt16::UInt32::UInt64::USize» : Table.Fact .subexpression .subexpression .declaration where
  widgetId := "finite-integer-convert-then-convert"
  factId := "986e32a2-1015-4fd0-bf1a-0983a85116ab:::a556b849-a735-48a9-8099-06496bddb069:::UInt8::UInt16::UInt32::UInt64::USize"
  rowAssociationId := "986e32a2-1015-4fd0-bf1a-0983a85116ab"
  columnAssociationId := "a556b849-a735-48a9-8099-06496bddb069"
  selectedLayers := #["UInt8", "UInt16", "UInt32", "UInt64", "USize", ]
  layerStates := #[
    {
      layerIdentifier := "UInt8"
      rowState := 
        
        some ⟨"UInt8.toUInt16", Grove.Framework.Subexpression.State.declaration
          (Grove.Framework.Declaration.def
            { name := `UInt8.toUInt16, renderedStatement := "UInt8.toUInt16 (a : UInt8) : UInt16", isDeprecated := false })⟩
        
      columnState := 
        none
        
      selectedCellStates := #[
      ]
    },
    {
      layerIdentifier := "UInt16"
      rowState := 
        none
        
      columnState := 
        
        some ⟨"UInt16.toUInt8", Grove.Framework.Subexpression.State.declaration
          (Grove.Framework.Declaration.def
            { name := `UInt16.toUInt8, renderedStatement := "UInt16.toUInt8 (a : UInt16) : UInt8", isDeprecated := false })⟩
        
      selectedCellStates := #[
      ]
    },
    {
      layerIdentifier := "UInt32"
      rowState := 
        
        some ⟨"UInt32.toUInt16", Grove.Framework.Subexpression.State.declaration
          (Grove.Framework.Declaration.def
            { name := `UInt32.toUInt16, renderedStatement := "UInt32.toUInt16 (a : UInt32) : UInt16", isDeprecated := false })⟩
        
      columnState := 
        
        some ⟨"UInt32.toUInt8", Grove.Framework.Subexpression.State.declaration
          (Grove.Framework.Declaration.def
            { name := `UInt32.toUInt8, renderedStatement := "UInt32.toUInt8 (a : UInt32) : UInt8", isDeprecated := false })⟩
        
      selectedCellStates := #[
        ⟨"UInt32.toUInt8_toUInt16", Grove.Framework.Declaration.thm
  { name := `UInt32.toUInt8_toUInt16,
    renderedStatement := "UInt32.toUInt8_toUInt16 (n : UInt32) : n.toUInt16.toUInt8 = n.toUInt8",
    isSimp := true,
    isDeprecated := false }⟩
,
      ]
    },
    {
      layerIdentifier := "UInt64"
      rowState := 
        
        some ⟨"UInt64.toUInt16", Grove.Framework.Subexpression.State.declaration
          (Grove.Framework.Declaration.def
            { name := `UInt64.toUInt16, renderedStatement := "UInt64.toUInt16 (a : UInt64) : UInt16", isDeprecated := false })⟩
        
      columnState := 
        
        some ⟨"UInt64.toUInt8", Grove.Framework.Subexpression.State.declaration
          (Grove.Framework.Declaration.def
            { name := `UInt64.toUInt8, renderedStatement := "UInt64.toUInt8 (a : UInt64) : UInt8", isDeprecated := false })⟩
        
      selectedCellStates := #[
        ⟨"UInt64.toUInt8_toUInt16", Grove.Framework.Declaration.thm
  { name := `UInt64.toUInt8_toUInt16,
    renderedStatement := "UInt64.toUInt8_toUInt16 (n : UInt64) : n.toUInt16.toUInt8 = n.toUInt8",
    isSimp := true,
    isDeprecated := false }⟩
,
      ]
    },
    {
      layerIdentifier := "USize"
      rowState := 
        
        some ⟨"USize.toUInt16", Grove.Framework.Subexpression.State.declaration
          (Grove.Framework.Declaration.def
            { name := `USize.toUInt16, renderedStatement := "USize.toUInt16 (a : USize) : UInt16", isDeprecated := false })⟩
        
      columnState := 
        
        some ⟨"USize.toUInt8", Grove.Framework.Subexpression.State.declaration
          (Grove.Framework.Declaration.def
            { name := `USize.toUInt8, renderedStatement := "USize.toUInt8 (a : USize) : UInt8", isDeprecated := false })⟩
        
      selectedCellStates := #[
        ⟨"USize.toUInt8_toUInt16", Grove.Framework.Declaration.thm
  { name := `USize.toUInt8_toUInt16,
    renderedStatement := "USize.toUInt8_toUInt16 (n : USize) : n.toUInt16.toUInt8 = n.toUInt8",
    isSimp := true,
    isDeprecated := false }⟩
,
      ]
    },
  ]
  metadata := {
    status := .done
    comment := ""
  }

def table : Table.Data .subexpression .subexpression .declaration where
  widgetId := "finite-integer-convert-then-convert"
  selectedRowAssociations := #["a556b849-a735-48a9-8099-06496bddb069", "986e32a2-1015-4fd0-bf1a-0983a85116ab", "178dabc2-f8ef-4731-bf7a-4f3892082ddd", "dd8fc53e-d116-4ba4-9119-ab830f42b88c", "f339227d-32af-42c1-8889-285142c34fe3", ]
  selectedColumnAssociations := #["a556b849-a735-48a9-8099-06496bddb069", "986e32a2-1015-4fd0-bf1a-0983a85116ab", "178dabc2-f8ef-4731-bf7a-4f3892082ddd", "dd8fc53e-d116-4ba4-9119-ab830f42b88c", "f339227d-32af-42c1-8889-285142c34fe3", ]
  selectedLayers := #["UInt8", "UInt16", "UInt32", "UInt64", "USize", ]
  selectedCellOptions := #[
    {
      layerIdentifier := "UInt32"
      rowValue := "986e32a2-1015-4fd0-bf1a-0983a85116ab"
      columnValue := "a556b849-a735-48a9-8099-06496bddb069"
      selectedCellOptions := #["UInt32.toUInt8_toUInt16", ]
    },
    {
      layerIdentifier := "UInt64"
      rowValue := "986e32a2-1015-4fd0-bf1a-0983a85116ab"
      columnValue := "a556b849-a735-48a9-8099-06496bddb069"
      selectedCellOptions := #["UInt64.toUInt8_toUInt16", ]
    },
    {
      layerIdentifier := "USize"
      rowValue := "986e32a2-1015-4fd0-bf1a-0983a85116ab"
      columnValue := "a556b849-a735-48a9-8099-06496bddb069"
      selectedCellOptions := #["USize.toUInt8_toUInt16", ]
    },
  ]
  facts := #[
    «986e32a2-1015-4fd0-bf1a-0983a85116ab:::a556b849-a735-48a9-8099-06496bddb069:::UInt8::UInt16::UInt32::UInt64::USize»,
  ]

def restoreState : RestoreStateM Unit := do
  addTable table