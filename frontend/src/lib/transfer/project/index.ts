// Code generated by jtd-codegen for TypeScript v0.2.1

export type Project = Project0;

export interface Assertion {
  id: string;
  message: string;
  success: boolean;
  title: string;
}

export interface AssociationTable {
  definition: AssociationTableDefinition;
  facts: AssociationTableFact[];
  state: AssociationTableState;
}

export interface AssociationTableCell {
  cellValue: string;
  columnIdentifier: string;
}

export type AssociationTableCellOption =
  | AssociationTableCellOptionDeclaration
  | AssociationTableCellOptionOther0;

export interface AssociationTableCellOptionDeclaration {
  constructor: "declaration";
  declaration: string;
}

export interface AssociationTableCellOptionOther0 {
  constructor: "other";
  other: AssociationTableCellOptionOther;
}

export interface AssociationTableCellOptionOther {
  longDescription: string;
  reference: Reference;
  shortDescription: string;
  stateRepr: string;
  value: string;
}

export interface AssociationTableColumnDescription {
  identifier: string;
  options: AssociationTableCellOption[];
  shortDescription: string;
}

export interface AssociationTableDefinition {
  columns: AssociationTableColumnDescription[];
  dataKind: DataKind;
  widgetId: string;
}

export interface AssociationTableFact {
  factId: string;
  metadata: FactMetadata;
  rowId: string;
  state: AssociationTableFactCellState[];
  validationResult: FactValidationResult;
  widgetId: string;
}

export interface AssociationTableFactCellState {
  cellValue: string;
  columnIdentifier: string;
  stateRepr: string;
}

export interface AssociationTableRow {
  columns: AssociationTableCell[];
  uuid: string;
}

export interface AssociationTableState {
  rows: AssociationTableRow[];
}

export enum DataKind {
  Declaration = "declaration",
  Subexpression = "subexpression",
}

export type Declaration = DeclarationDef | DeclarationMissing | DeclarationThm;

export interface DeclarationDef {
  constructor: "def";
  def: Definition;
}

export interface DeclarationMissing {
  constructor: "missing";
  missing: string;
}

export interface DeclarationThm {
  constructor: "thm";
  thm: Theorem;
}

export interface Definition {
  isDeprecated: boolean;
  name: string;
  renderedStatement: string;
}

export interface FactMetadata {
  comment: string;
  status: FactStatus;
}

export enum FactStatus {
  Bad = "bad",
  BelievedGood = "believedGood",
  Done = "done",
  NothingToDo = "nothingToDo",
  Postponed = "postponed",
}

export type FactValidationResult =
  | FactValidationResultInvalidated
  | FactValidationResultNew
  | FactValidationResultOk;

export interface FactValidationResultInvalidated {
  constructor: "invalidated";
  invalidated: Invalidation;
}

export interface FactValidationResultNew {
  constructor: "new";
  dummy?: string;
}

export interface FactValidationResultOk {
  constructor: "ok";
  dummy?: string;
}

export interface Invalidation {
  longDescription: string;
  shortDescription: string;
}

export type Node =
  | NodeAssertion
  | NodeAssociationTable
  | NodeNamespace
  | NodeSection
  | NodeShowDeclaration
  | NodeTable
  | NodeText;

export interface NodeAssertion {
  constructor: "assertion";
  assertion: Assertion;
}

export interface NodeAssociationTable {
  constructor: "associationTable";
  associationTable: AssociationTable;
}

export interface NodeNamespace {
  constructor: "namespace";
  namespace: string;
}

export interface NodeSection {
  constructor: "section";
  section: Section;
}

export interface NodeShowDeclaration {
  constructor: "showDeclaration";
  showDeclaration: ShowDeclaration;
}

export interface NodeTable {
  constructor: "table";
  table: Table;
}

export interface NodeText {
  constructor: "text";
  text: string;
}

export interface Project0 {
  declarations: Declaration[];
  hash: string;
  projectNamespace: string;
  rootNode: Node;
}

export type Reference = ReferenceNone;

export interface ReferenceNone {
  constructor: "none";
  dummy?: string;
}

export interface Section {
  children: Node[];
  id: string;
  title: string;
}

export interface ShowDeclaration {
  definition: ShowDeclarationDefinition;
  facts: ShowDeclarationFact[];
}

export interface ShowDeclarationDefinition {
  declarationKey: string;
  id: string;
  name: string;
}

export interface ShowDeclarationFact {
  factId: string;
  metadata: FactMetadata;
  state: Declaration;
  validationResult: FactValidationResult;
  widgetId: string;
}

export interface Table {
  definition: TableDefinition;
  facts: TableFact[];
  state: TableState;
}

export interface TableAssociation {
  id: string;
  layers: TableAssociationLayer[];
}

export interface TableAssociationLayer {
  layerIdentifier: string;
  layerValue: string;
}

export type TableAssociationSource =
  | TableAssociationSourceConst
  | TableAssociationSourceTable;

export interface TableAssociationSourceConst {
  constructor: "const";
  const: TableConstantAssociationSource;
}

export interface TableAssociationSourceTable {
  constructor: "table";
  table: string;
}

export interface TableCellDataForLayer {
  rows: TableCellDataForRowValue[];
  sourceLayerIdentifier: string;
}

export interface TableCellDataForRowValue {
  cellEntries: TableCellEntry[];
  rowKey: string;
  targetLayerIdentifier: string;
}

export interface TableCellEntry {
  columnKey: string;
  options: TableCellOption[];
}

export type TableCellOption =
  | TableCellOptionDeclaration
  | TableCellOptionOther0;

export interface TableCellOptionDeclaration {
  constructor: "declaration";
  declaration: string;
}

export interface TableCellOptionOther0 {
  constructor: "other";
  other: TableCellOptionOther;
}

export interface TableCellOptionOther {
  longDescription: string;
  reference: Reference;
  shortDescription: string;
  stateRepr: string;
  value: string;
}

export interface TableConstantAssociationSource {
  associations: TableAssociation[];
}

export interface TableDefinition {
  cellKind: DataKind;
  cells: TableCellDataForLayer[];
  columnKind: DataKind;
  columnSource: TableAssociationSource;
  layerIdentifiers: string[];
  rowKind: DataKind;
  rowSource: TableAssociationSource;
  widgetId: string;
}

export interface TableFact {
  factId: string;
  identifier: TableFactIdentifier;
  metadata: FactMetadata;
  state: TableFactState;
  validationResult: FactValidationResult;
  widgetId: string;
}

export interface TableFactIdentifier {
  columnAssociationId: string;
  rowAssociationId: string;
  selectedLayers: string[];
}

export interface TableFactLayerState {
  columnState: TableFactOptionalSingleState;
  layerIdentifier: string;
  rowState: TableFactOptionalSingleState;
  selectedCellStates: TableFactSingleState[];
}

export type TableFactOptionalSingleState =
  | TableFactOptionalSingleStateNone
  | TableFactOptionalSingleStateSome;

export interface TableFactOptionalSingleStateNone {
  constructor: "none";
  dummy?: string;
}

export interface TableFactOptionalSingleStateSome {
  constructor: "some";
  some: TableFactSingleState;
}

export interface TableFactSingleState {
  stateRepr: string;
  value: string;
}

export interface TableFactState {
  layerStates: TableFactLayerState[];
}

export interface TableSelectedCellOptions {
  columnValue: string;
  rowValue: string;
  selectedCellOptions: string[];
}

export interface TableState {
  selectedCellOptions: TableSelectedCellOptions[];
  selectedColumnAssociations: string[];
  selectedLayers: string[];
  selectedRowAssociations: string[];
}

export interface Theorem {
  isDeprecated: boolean;
  isSimp: boolean;
  name: string;
  renderedStatement: string;
}
